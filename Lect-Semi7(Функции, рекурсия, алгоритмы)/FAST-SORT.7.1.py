""" Объяснение кода:
Функция quicksort(arr) реализует быструю сортировку. Она принимает массив arr в качестве аргумента и возвращает отсортированный массив.
Если длина массива меньше или равна 1, то он уже отсортирован, поэтому функция возвращает его как есть.
В противном случае выбирается опорный элемент (в данном случае первый элемент).
Создаются два списка: less, содержащий элементы меньше опорного, и greater, содержащий элементы больше или равные опорному.
Функция рекурсивно вызывается для списков less и greater, и их результаты объединяются с опорным элементом в конечный отсортированный массив.
Результат сортировки возвращается в качестве результата работы функции. """

def quicksort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x < pivot]
        greater = [x for x in arr[1:] if x >= pivot]
        return quicksort(less) + [pivot] + quicksort(greater)

# Пример использования
arr = [3, 6, 8, 10, 1, 2, 1]
print(quicksort(arr))  # Вывод: [1, 1, 2, 3, 6, 8, 10]

 """ Быстрая сортировка
Brad Cox Tom Love
● 1-е повторение рекурсии:
○ array = [10, 5, 2, 3]
○ pivot = 10
○ less = [5, 2, 3]
○ greater = []
○ return quicksort([5, 2, 3]) + [10] + quicksort([])
● 2-е повторение рекурсии:
○ array = [5, 2, 3]
○ pivot = 5
○ less = [2, 3]
○ greater = []
○ return quicksort([2, 3]) + [5] + quicksort([]) # Важно! Не забывайте, что здесь помимо вызова рекурсии 
добавляется список [10]
● 3-е повторение рекурсии:
○ array = [2, 3]
○ return [2, 3] # Сработал базовый случай рекурсии
На этом работа рекурсии завершилась и итоговый список будет выглядеть таким образом: [2, 3] + [5] + [10] = [2, 3, 5, 10 ] """

