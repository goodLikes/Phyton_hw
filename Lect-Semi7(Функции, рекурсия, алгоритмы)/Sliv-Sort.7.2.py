""" Сортировка слиянием (Merge Sort) — это эффективный алгоритм сортировки, который использует метод "разделяй и властвуй" для разбиения массива на две равные части, сортировки каждой части отдельно, а затем слияния отсортированных частей в один отсортированный массив.

Принцип работы алгоритма:

Разделение массива: Исходный массив разбивается на две равные части.
Рекурсивная сортировка: Каждая из частей рекурсивно сортируется с использованием того же алгоритма.
Слияние отсортированных частей: Отсортированные части сливаются в один отсортированный массив.
Процесс слияния двух отсортированных массивов выглядит следующим образом:

Создается пустой массив, в который будут складываться элементы из двух отсортированных массивов.
Итеративно выбираются наименьшие элементы из начала каждого из двух массивов и добавляются в результирующий массив.
Повторяется до тех пор, пока в одном из массивов не останется элементов.
Все оставшиеся элементы из непустого массива добавляются в конец результирующего массива. """

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    # Разделение массива
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]
    
    # Рекурсивная сортировка каждой половины
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)
    
    # Слияние отсортированных половин
    return merge(left_half, right_half)

def merge(left, right):
    result = []
    left_idx, right_idx = 0, 0
    
    # Слияние отсортированных массивов
    while left_idx < len(left) and right_idx < len(right):
        if left[left_idx] < right[right_idx]:
            result.append(left[left_idx])
            left_idx += 1
        else:
            result.append(right[right_idx])
            right_idx += 1
    
    # Добавление оставшихся элементов
    result.extend(left[left_idx:])
    result.extend(right[right_idx:])
    
    return result

# Пример использования
arr = [3, 6, 8, 10, 1, 2, 1]
print(merge_sort(arr))  # Вывод: [1, 1, 2, 3, 6, 8, 10]
